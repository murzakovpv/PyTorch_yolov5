# import cv2
# import time
# import logging
# import os
# # from yolo_wrapper import YOLODetector
# # from models import PeopleCountRecord
# # from database import Database
# from ultralytics.utils.plotting import Annotator

# from src.yolo_wrapper import YOLODetector
# from src.models import PeopleCountRecord
# from src.database import Database

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.FileHandler("app.log"),
#         logging.StreamHandler()
#     ]
# )
# logger = logging.getLogger(__name__)

# class VideoProcessor:
#     def __init__(self, camera_config, show_video=False):
#         self.camera_id = camera_config.id
#         self.scene_id = camera_config.scene_id
#         self.rtmp_url = camera_config.rtmp_url
#         self.frame_rate = camera_config.frame_rate
#         self.detector = YOLODetector()
#         self.db = Database()
#         self.last_save_time = time.time()
#         self.show_video = show_video
#         self.window_name = f"Camera {self.camera_id}"

#     def process_stream(self):
#         attempts = 0
#         max_attempts = 5
        
#         while attempts < max_attempts:
#             try:
#                 logger.info(f"‚åõ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–∞–º–µ—Ä–µ {self.camera_id}: {self.rtmp_url}")
#                 cap = cv2.VideoCapture(self.rtmp_url)
                
#                 if not cap.isOpened():
#                     logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ {attempts+1}/{max_attempts}")
#                     attempts += 1
#                     time.sleep(2)
#                     continue
                
#                 logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ {self.camera_id} —É—Å–ø–µ—à–Ω–æ!")
#                 frame_counter = 0
#                 people_counts = []
#                 frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
#                 frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
#                 fps = cap.get(cv2.CAP_PROP_FPS)
                
#                 logger.info(f"üì∫ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ: {frame_width}x{frame_height} @ {fps:.1f} FPS")
                
#                 if self.show_video:
#                     cv2.namedWindow(self.window_name, cv2.WINDOW_NORMAL)
#                     cv2.resizeWindow(self.window_name, frame_width // 2, frame_height // 2)
                
#                 while cap.isOpened():
#                     ret, frame = cap.read()
#                     if not ret:
#                         logger.warning(f"üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã {self.camera_id}")
#                         break
                    
#                     frame_counter += 1
                    
#                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—É
#                     if frame_counter % int(fps / self.frame_rate) == 0:
#                         # –î–µ—Ç–µ–∫—Ü–∏—è –ª—é–¥–µ–π
#                         results = self.detector.detect(frame)
#                         people_count = 0
                        
#                         # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#                         if self.show_video or results:
#                             annotator = Annotator(frame)
                            
#                             for result in results:
#                                 boxes = result.boxes
#                                 for box in boxes:
#                                     cls = int(box.cls)
#                                     conf = float(box.conf)
#                                     if cls == 0:  # –ö–ª–∞—Å—Å 0 - —á–µ–ª–æ–≤–µ–∫
#                                         people_count += 1
#                                         if self.show_video:
#                                             annotator.box_label(box.xyxy[0], f"Person {conf:.2f}", color=(0, 255, 0))
                                    
#                                     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
#                                     elif self.show_video:
#                                         label = self.detector.model.names[cls]
#                                         annotator.box_label(box.xyxy[0], f"{label} {conf:.2f}", color=(0, 0, 255))
                        
#                         people_counts.append(people_count)
#                         logger.info(f"–ö–∞–º–µ—Ä–∞ {self.camera_id}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª—é–¥–µ–π - {people_count}")
                        
#                         # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
#                         if self.show_video:
#                             # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ FPS –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π
#                             fps_text = f"FPS: {1/(time.time() - self.last_frame_time):.1f}" if hasattr(self, 'last_frame_time') else "FPS: -"
#                             cv2.putText(frame, fps_text, (10, 30), 
#                                         cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
#                             cv2.putText(frame, f"People: {people_count}", (10, 70), 
#                                         cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                            
#                             cv2.imshow(self.window_name, frame)
#                             if cv2.waitKey(1) & 0xFF == ord('q'):
#                                 logger.info("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã—Ö–æ–¥")
#                                 break
                        
#                         self.last_frame_time = time.time()
                    
#                     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
#                     current_time = time.time()
#                     if current_time - self.last_save_time >= 10 and people_counts:
#                         avg_count = sum(people_counts) / len(people_counts)
#                         record = PeopleCountRecord(
#                             camera_id=self.camera_id,
#                             scene_id=self.scene_id,
#                             count=round(avg_count)
#                         )
                        
#                         try:
#                             self.db.insert_record(record)
#                             logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: –ö–∞–º–µ—Ä–∞ {self.camera_id}, —Å—Ä–µ–¥–Ω–µ–µ –ª—é–¥–µ–π: {avg_count:.1f}")
#                         except Exception as e:
#                             logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}")
                        
#                         people_counts = []
#                         self.last_save_time = current_time
                
#                 # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#                 break
                
#             except Exception as e:
#                 logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–º–µ—Ä—ã {self.camera_id}: {str(e)}")
#                 attempts += 1
#                 time.sleep(3)
        
#         # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
#         if attempts >= max_attempts:
#             logger.error(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ {self.camera_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        
#         try:
#             cap.release()
#             if self.show_video:
#                 cv2.destroyWindow(self.window_name)
#         except:
#             pass






import cv2
import time

from src.yolo_wrapper import YOLODetector
from src.models import PeopleCountRecord
from src.database import Database

class VideoProcessor:    
    def __init__(self, camera_config):
        self.camera_id = camera_config.id
        self.scene_id = camera_config.scene_id
        self.rtmp_url = camera_config.rtmp_url
        self.frame_rate = camera_config.frame_rate
        self.detector = YOLODetector()
        self.db = Database()
        self.last_save_time = time.time()

    def process_stream(self):
        cap = cv2.VideoCapture(self.rtmp_url)
        if not cap.isOpened():
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ç–æ–∫—É: {self.rtmp_url}")

        frame_counter = 0
        people_counts = []

        while True:
            ret, frame = cap.read()
            if not ret:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                continue

            frame_counter += 1
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—É
            if frame_counter % int(cap.get(cv2.CAP_PROP_FPS) / self.frame_rate) == 0:
                count = self.detector.detect_people(frame)
                people_counts.append(count)
                print(f"–ö–∞–º–µ—Ä–∞ {self.camera_id}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª—é–¥–µ–π - {count}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            current_time = time.time()
            # if current_time - self.last_save_time >= 60:
            #     avg_count = sum(people_counts) // len(people_counts) if people_counts else 0
            #     record = PeopleCountRecord(
            #         camera_id=self.camera_id,
            #         scene_id=self.scene_id,
            #         count=avg_count
            #     )
            #     self.db.insert_record(record)
                
            #     people_counts = []
            #     self.last_save_time = current_time
            #     print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: –ö–∞–º–µ—Ä–∞ {self.camera_id}, –õ—é–¥–µ–π: {avg_count}")

            # # –í –º–µ—Ç–æ–¥–µ process_stream, –≤ –±–ª–æ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥:
            if current_time - self.last_save_time >= 20:
                avg_count = sum(people_counts) // len(people_counts) if people_counts else 0
                record = PeopleCountRecord(
                    camera_id=self.camera_id,
                    scene_id=self.scene_id,
                    count=avg_count
                )
                try:
                    self.db.insert_record(record)
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: –ö–∞–º–µ—Ä–∞ {self.camera_id}, –õ—é–¥–µ–π: {avg_count}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}")
                
                people_counts = []
                self.last_save_time = current_time    
                